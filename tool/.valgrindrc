# valgrind [opts] cmd [args]
#
# memory related, 10-50 times slower
#
# Compile with -g, -O0 (-O1 line numbers can be inaccurate), -fno-inline
#
# fix errors in the order that they are reported
#
#--[tool:]<opt>=<val>
#

# Memcheck:
# SGcheck : detect overruns of stack and global arrays, complementary to Memcheck.
# Cachegrind: cpu cache and branch-prediction profiler
# Callgrind : call-graph generating cache profiler.
# Massif  : heap profiler, help to use less memory
# DHAT    : heap profiler, help to understand issues of lifetimes, utilisation, and layout inefficiencies
# Helgrind: thread error detector
# DRD     : thread error detector
#--tool=memcheck|cachegrind|callgrind|helgrind|drd|massif

# ask whether to print the error reported
--gen-suppressions=no|yes|all

# disable load $PREFIX/lib/valgrind/default.supp
--default-suppressions=no

# max 100 suppression files
--suppressions=<suppression-file>

# print elapsed wallclock time since startup
--time-stamp=no|yes

# decode c++ name mangling
--demangle=yes|no

# diagnostics before program given a SIGILL signal
# Often an illegal instruction indicates a bug
--sigill-diagnostics=yes|no

# default: none, insert a line containing the begin (end) string before (after) each error
# searching for errors mixed valgrind errors with program output.
--error-markers=<begin>,<end>



--trace-children=no|yes                       # sub-processes via the *exec* system call
--child-silent-after-fork=no|yes              # sub-processes via the *fork* system callo
--trace-children-skip=<exe-name-patt,...>
--trace-children-skip-by-arg=<arg-patt,...>   # examining the arguments to the child process



# allows GDB to control and debug your program
# full: more precise breakpoints and watchpoints, significant overheads
--vgdb=yes|full|no

# connect with GDB after <n> errors
# 0: insert GDB breakpoint before execution
--vgdb-error=999999999

# when to start GDB beside --vgdb-error
# startup: before your program is executed
# exit:    after the last instruction of your program
# valgrindabexit: on Valgrind abnormal exit
# all: =startup,exit,valgrindabexit
# none: empty set
--vgdb-stop-at=none|startup|exit|valgrindabexit



--main-stacksize=<ulimit -s>
--max-stackframe=2000000    # max offset of stack pointer
--num-callers=12            # <= 500, entries of stack traces identify program locations
--max-threads=500           # max threads can be handled
--error-limit=yes|no        # stops reporting errors after 10 000 000 in total, or 1000 different ones






--log-fd=2
--log-file=<filename>
--log-socket=<ip[:1500]>    # VG_CLO_DEFAULT_LOGPORT, valgrind-listener
--xml=no|yes                # whether important parts (e.g. tool error messages) in XML format
--xml-fd=-1                 # -1: disabled
--xml-file=<filename>
--xml-socket=<ip[:1500]>
--xml-user-comment=<string> # extra comment string at the start of the XML output



--error-exitcode=0          # 0 = cmd exitcode



--quiet          # -q, only print error messages, useful for automated test
--verbose        # -v, -vv, show misc extra info
