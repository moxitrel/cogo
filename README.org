* Introduction
A stackless coroutine library for C, implemented yield, await, concurrency and channel.

* Overview
#+BEGIN_SRC C
#include "cogo/cogo_co.h"

CO_DECLARE(coroutine_name, T arg, ...)
{
    coroutine_name_t* const thiz = (coroutine_name_t*)co_this;
CO_BEGIN:

    //
    // user code
    //

CO_END:;
}
#+END_SRC

* Example
*** Natural number generator
#+BEGIN_SRC C
#include <stdio.h>
#include "cogo/cogo_co.h"

CO_DECLARE(nat_gen, int value)
{
  nat_gen_t* const thiz = (nat_gen_t*)co_this;
CO_BEGIN:

    for (thiz->value = 0; ; thiz->value++) {
        CO_YIELD;
    }

CO_END:;
}

void nat_gen_example(void)
{
    nat_gen_t ng = CO_MAKE(nat_gen);
    cogo_co_sched_t sched = CO_SCHED_MAKE(&ng);

    CO_SCHED_STEP(&sched);
    printf("ng.value: %d\n", ng.value);   // n.value: 0

    CO_SCHED_STEP(&sched);
    printf("ng.value: %d\n", ng.value);   // n.value: 1

    CO_SCHED_STEP(&sched);
    printf("ng.value: %d\n", ng.value);   // n.value: 2
}
#+END_SRC

* API
- CO_AWAIT (CO) :: call another coroutine and wait it to finish.
- CO_BEGIN :: label coroutine begin.
- CO_DECLARE(NAME, ...) :: define a coroutine named NAME
- CO_END :: label coroutine end.
- CO_MAKE(NAME, ...) :: construct a coroutine
- CO_RETURN :: Return with ending coroutine.
- CO_SCHED_RUN(SCHED) :: loop running until finish all coroutines
- CO_START(CO) :: Add a coroutine to scheduler to run.
- co_this :: point to coroutine object.
- CO_YIELD :: Yield from coroutine.

* See Also
- [[https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html][Coroutines in C]]
- [[http://dunkels.com/adam/pt/][Protothreads]]
