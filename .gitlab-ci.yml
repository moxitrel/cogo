# reserved keywords:
#    image
#    services
#    stages
#    types
#    before_script
#    after_script
#    variables
#    cache

include:
  - '/config/xxx.yml'   #in repository, / = project root
  - 'https://...'       #

# Job runs top-down
# Job runs in parallel in same stage
# If not defined, default to: build, test, deploy
stages:
  - build
  - test      # default stage if not defined in job
  - deploy

# for all jobs 
image: <docker image>   # the container where to run the job, default using Docker Hub
  name: <docker image>  #
  entrypoint: ["", ...] # --entrypoint
services:               # docker image work assist <image>, for network accessible
  - <docker image>      # container name: user/image -> user-image | user__image
  - name:       <docker image>
    entrypoint: <...>
    command:    <...>
    alias:      <...>
  - <...>

# env, can be referenced in script
variables:
  <var>: <val>

  GIT_SUBMODULE_STRATEGY: <...>

  CI_PROJECT_DIR: /builds         # set project root, default cloned into "/builds/<user>/<repo>"

  GET_SOURCES_ATTEMPTS: 1         # Number to fetch    sources  , default 1
  ARTIFACT_DOWNLOAD_ATTEMPTS: 1   # Number to download artifacts, defualt 1
  RESTORE_CACHE_ATTEMPTS: 1       # Number to restore  cache    , defualt 1

# run before all jobs, after the restoration of artifacts
# before_script and job script run in a single context/container
before_script:
  - 'apt update && apt install -y --no-install-recommends <pkg>'  # for gitlab.com shared runner
  - "./depend.sh"                                                 # install dependency

  - <shell cmd>

# run separately after each job, * even job failed *.
# changes in before_script or script might not be visible outside of the working tree
after_script:
  - <shell cmd>

# File and dirs which should be cached between jobs
# Only paths within the project
cache:
  key: <id>
  paths:
    - <project path>
    - <lib/*>         # support Wildcards
  untracked: true     # cache all files that are untracked in repository
  policy: pull        # default: pull-push

# Job runs independently from each other.
<unique-job-name>:
  stage: test     # default: test stage

  tags:                   # use Runner has these tags
    - <runner tag>
  image: <docker image>   # the container where to run the job, default using Docker Hub
    name: <docker image>  #
    entrypoint: ["", ...] # --entrypoint
  services:               # docker image work assist <image>, for network accessible
    - <docker image>      # container name: user/image -> user-image | user__image
    - name:       <docker image>
      entrypoint: <...>
      command:    <...>
      alias:      <...>
    - <...>

  variables:      # Override global vars
    <var>: <val>

  before_script:  # override global before_script
    - <shell cmd>
  script:         #*required, need to quote :, {, }, [, ], ,, &, *, #, ?, |, -, <, >, =, !, %, @, `
    - <shell cmd>
  after_script:   # override global after_script
    - <shell cmd>

  when:           # When to run the job.
    - on_success  #.All jobs from prior stages succeed, default.
    - on_failure  # At least one job from prior stages fails.
    - always      # Always run.
    - manual      # Explicitly started by user (has a play button), default non-block (set allow_failure: true)
  only:           # job only  run for these git refs
  except:         # job won't run for these git refs
    - <regex>
    - <repo-path>
    - branches  # A branch is pushed
    - tags      # A tag    is pushed
    - pushes    # A git push
    - api       # When pipeline has been triggered by a second pipelines API (not triggers API).
    - external  # When using CI services other than GitLab.
    - pipelines # For multi-project triggers, created using the API with CI_JOB_TOKEN.
    - schedules # scheduled pipelines
    - triggers  # Triggered by a trigger token
    - web       # Click <Run pipeline> button in GitLab UI
  retry:         0    # [0,2], how many times to retry the job when fails.
  allow_failure: true # won't affect job result.

  coverage: '/regex/' # how code coverage will be extracted from the job output
  artifacts:          # Files and directories sent to GitLab for download after success.
    name:             # name the created artifacts archive, can use the predefined variables.
    paths:            # only in project.
    untracked: true   # add all Git untracked files to artifacts.
    when:
      - on_success    #.Upload when the job succeeds, default.
      - on_failure    # Upload when the job fails.
      - always        # Always upload.
    expire_in: 30d    # defaults to the instance wide setting (30 days by default, forever on GitLab.com)
  dependencies:       # Include artifacts from previous jobs (default).
    []                # Not include artifacts from previous jobs.
    - <job>

  environment: [name]     # Hint this job actually deploys to an environment.
    name: <deploy-name>   # <deploy-name> can contains: letters | digits | - | _ | $ | { | } | spaces | /
    url : <https://...>   #
    on_stop: <job>        # run <job> when this job is successfully finished
    action : stop         # used with on_stop

  cache:                  # file and dirs should be cached between jobs. only paths within the project
    key: <id>
    paths:
      - <project path>
      - <lib/*>           # support Wildcards
    untracked: true       # cache all files that are untracked in repository

# A special job, used to serve as static website.
# 1. Any static content must be placed under the public/ directory
# 2. artifacts with a path to the public/ directory must be defined
pages:
  artifacts:
      paths:
        - public
